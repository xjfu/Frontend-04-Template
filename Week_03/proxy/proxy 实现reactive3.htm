<script>
    let log = function() {
    
        console.log.apply(console, arguments)
    }
    let callbacks = new Map();

    let object = {
        a: 1,
        b: 2,
    }
    // 第二个参数包含了要对po做的一些钩子

    let useReactives = []

    let po = reactive(object)

    effect(()=>{
        console.log(po.a)

    })
    function effect(callback) {
        useReactives = []
        callback()
        for (let reactivity of useReactives) {
            if (!callbacks.has(reactivity[0])) {
                callbacks.set(reactivity[0], new Map());
            }
            if (!callbacks.get(reactivity[0]).has(reactivity[1])) {
                callbacks.get(reactivity[0]).set(reactivity[1], []);
            }
            callbacks.get(reactivity[0]).get(reactivity[1]).push(callback)
        }
        // console.log(useReactives)
    }
    function reactive(object) {
        return new Proxy(object, {
        // 设置对象属性的时候
            set(obj, prop, val) {
                obj[prop] = val
                if (callbacks.get(obj)) {
                    if (callbacks.get(obj).get(prop)) {
                        for (let callback of callbacks.get(obj).get(prop)) {
                            callback()
                        }
                    }
                }
                return obj[prop];
            },
            get(obj, prop) {
                useReactives.push([obj, prop])
                return obj[prop];
            }
        })
    }

</script>